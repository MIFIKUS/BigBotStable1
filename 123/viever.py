import asyncio
import os
import random
import time
import json
import nest_asyncio

from telethon import types, functions
from telethon.sync import TelegramClient

nest_asyncio.apply()


class Viever:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–π"""
    def __init__(self, api_id, api_hash, phone_number, code):
        self.api_id, self.api_hash = api_id, api_hash
        self.LIMIT = LIMIT
        self.emoji = ['‚ù§Ô∏è', 'üëç', 'ü•∞', 'üî•', 'üëè', 'üòÅ']
        self.client = TelegramClient(phone_number, self.api_id, self.api_hash, system_version="4.16.30-vxCUSTOM")
        self.phone_number = phone_number

    async def send_code(self):
        if not await self.client.is_user_authorized():
            await self.client.send_code_request(self.phone_number)

    async def get_code(self, code):
        await self.client.sign_in(self.phone_number, code)

    async def connect(self, code):
        #–°—é–¥–∞ –¥–æ–±–∞–≤–∏–ª code. –ö–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–∑ —Ç–≥
        """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–∫–∫—É"""
        await self.client.connect()
        if not await self.client.is_user_authorized():
            await self.client.send_code_request(self.phone_number)
            await self.client.sign_in(self.phone_number, code)

        await self.client.start()
        await self.main()

    async def disconnect(self):
        """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏—Å–∫–æ–Ω–µ–∫—Ç–∞ –æ—Ç –∞–∫–∫–∞"""
        await self.client.disconnect()

    async def get_users_if_list_of_participants_is_not_availible(self, dialog):
        """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–π –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–µ—Å–µ–¥–µ —Å–∫—Ä—ã—Ç"""
        users_two = []
        partisipants = {}
        count = 0

        entity = await self.client.get_entity(dialog)
        async for message in self.client.iter_messages(entity.id, limit=self.LIMIT):
            try:
                sender = await message.get_sender()
                if sender is None:
                    continue
                partisipants.update({sender.username: sender})
            except:
                continue

        for user, sender in partisipants.items():
            try:
                if not sender.stories_unavailable and not sender.stories_hidden and sender.stories_max_id:
                   await self.client(functions.stories.ReadStoriesRequest(peer=sender.id, max_id=sender.stories_max_id))
                   await self.client(functions.stories.SendReactionRequest(peer=sender.id, story_id=sender.stories_max_id, reaction=types.ReactionEmoji(emoticon=random.choice(self.emoji))))

                   users_two.append(f'{sender.id}, {sender.username}')
                   count += 1

            except Exception as e:
                print(e)
                continue

        return users_two, count

    async def get_users_if_list_of_participants_availible(self):
        """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–π –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–µ—Å–µ–¥–µ –Ω–µ —Å–∫—Ä—ã—Ç"""
        users_one = []
        file_name = None

        dialogs = await self.client.get_dialogs()
        for dialog in dialogs:
            try:
                count = 0
                if dialog.is_group:
                    entity = await self.client.get_entity(dialog)
                    time.sleep(1) #–ó–∞—á–µ–º —Ç—É—Ç —Ç–∞–π–º—Å–ª–∏–ø?
                    if dialog.entity.participants_count == len([i async for i in self.client.iter_participants(entity=dialog.entity)]):
                        async for user in self.client.iter_participants(entity=dialog.entity):
                            if not user.stories_unavailable and not user.stories_hidden and user.stories_max_id:
                                await self.client(functions.stories.ReadStoriesRequest(peer=user.id, max_id=user.stories_max_id))
                                await self.client(functions.stories.SendReactionRequest(peer=user.id, story_id=user.stories_max_id, reaction=types.ReactionEmoji(emoticon=random.choice(self.emoji))))

                                users_one.append(f'{user.id}, {user.username}, {user.phone_number}')
                                count += 1
                    else:
                        func, vievs = await self.get_users_if_list_of_participants_is_not_availible(dialog)
                        users_one.append('\n'.join(func))
                        count += vievs
                    text = f'–í –≥—Ä—É–ø–ø–µ {entity.title} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {count}'
                file_name = f'number of views from the phone {self.phone_number}.txt'
            except:
                continue
        return list(set(users_one)), file_name, text

    async def write_unique_elements(self, file_name, users):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –∏ –Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–π
        —á–µ—Ä–µ–∑ set –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        if not os.path.exists(file_name):
            open(file_name, 'w').close()

        with open(file_name, 'r+') as file:
            previous_elements = file.read().splitlines()
            unique_elements = set(users).difference(set(previous_elements))
            if unique_elements and unique_elements not in previous_elements:
                file.seek(0, 2)
                file.write('\n'.join(unique_elements) + '\n')
                #file.close() close –≤ with –Ω–µ –Ω—É–∂–µ–Ω. With –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º
            #else:
            #    file.close()
            #–¢—É—Ç —Ç–æ–∂–µ —Å–∞–º–æ–µ

        with open(file_name, "r") as file:
            lines = file.readlines()

        unique_lines = []
        for line in lines:
            if line not in unique_lines:
                unique_lines.append(line)

        with open(file_name, "w") as file:
            for line in unique_lines:
                file.write(line)

    async def main(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—à–∏–π –∞–∫–∫–∞—É–Ω—Ç')

        users, file_name = await self.get_users_if_list_of_participants_availible()
        await self.write_unique_elements(file_name, users)
        await self.write_unique_elements('all_users.txt', users)
        await self.disconnect()

with open("Settings.json", 'r', encoding='utf-8') as settings:
    settings_data = json.load(settings)

#–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å api_id –∏ api_hash –∫–æ–Ω–∞—Å—Ç–∞–Ω—Ç–∞–º–∏. –ò–±–æ –≤ –ø—Ä–æ—Ü–µ–µ—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–Ω–∏ –º–µ–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç
api_id, api_hash = settings_data.get("api_id"), settings_data.get("api_hash")
phone_numbers = [i for i in settings_data.get("PHONE_NUMBERS")]
LIMIT = settings_data.get("limit")

clients = []

init = Init()

async def run(code):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    for phone_number in phone_numbers:
        client = Viever(api_id, api_hash, phone_number, code)
        clients.append(client)

        await client.connect()

async def launch():
    #–Ω–∞ –±—É–¥—É—â–µ–µ. –õ—É—á—à–µ –Ω–µ –¥–µ–ª–∞–π run –∏ launch –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ)
    #–¢–∞–∫ –∂–µ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ connect.
    #–•–æ—Ç—è –æ–Ω –¥–µ–ª–∞–µ—Ç –≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è –≤—Å—é –º–∞–≥–∏—é. –í –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –ª—É—á—à–µ —Å–æ–∑–¥–∞–≤–∞–π –æ—Å–Ω–æ–≤–Ω—é —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥–∏ –≤ main,
    #–∞ –≤ –º–µ—Ç–æ–¥—ã –ø–æ —Ç–∏–ø—É connect —Ç–æ–ª—å–∫–æ –ø–æ–¥–ª–∫—é—á–µ–Ω–∏–µ
    while True:
        asyncio.run(run())
        time.sleep(random.randint(15, 30))

